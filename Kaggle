{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":186432242,"sourceType":"kernelVersion"}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport random\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Selection Sort         \ndef selection_sort(lista):\n    tam_lista = len(lista)\n    for j in range(tam_lista - 1):\n        min_index = j\n        for indice in range(j, tam_lista):\n            if lista[indice] < lista[min_index]:\n                min_index = indice\n        if lista[j] > lista[min_index]:\n#           lista[j], lista[min_index] = lista[min_index], lista[j] # possível em python\n            aux = lista[j]\n            lista[j] = lista[min_index]\n            lista[min_index] = aux\n\n            \nif __name__ == '__main__':\n    strings = [\"banana\", \"apple\", \"orange\", \"grape\", \"cherry\", \"blueberry\", \"peach\", \"kiwi\", \"mango\", \"strawberry\"]\n    lista_teste = [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\n    print('------------------------------------------------------------------')\n    print(f'Lista de inteiros desordenada: {lista_teste}')\n    selection = selection_sort(lista_teste)\n    print(f'Lista ordenada de inteiros por Selection Sort: {lista_teste}')\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings desordenada:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n    selection2 = selection_sort(strings)\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings ordenada por Selection Sort:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T21:48:23.422372Z","iopub.execute_input":"2024-07-01T21:48:23.422776Z","iopub.status.idle":"2024-07-01T21:48:23.436819Z","shell.execute_reply.started":"2024-07-01T21:48:23.422744Z","shell.execute_reply":"2024-07-01T21:48:23.435560Z"},"trusted":true},"execution_count":106,"outputs":[{"name":"stdout","text":"------------------------------------------------------------------\nLista de inteiros desordenada: [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\nLista ordenada de inteiros por Selection Sort: [1, 3, 5, 6, 8, 16, 22, 28, 29, 32, 34, 41, 42, 49, 50, 51, 63, 64, 69, 74, 77, 81, 83, 88, 90, 117]\n------------------------------------------------------------------\nLista de strings desordenada:\n1 palavra banana\n2 palavra apple\n3 palavra orange\n4 palavra grape\n5 palavra cherry\n6 palavra blueberry\n7 palavra peach\n8 palavra kiwi\n9 palavra mango\n10 palavra strawberry\n------------------------------------------------------------------\n------------------------------------------------------------------\nLista de strings ordenada por Selection Sort:\n1 palavra apple\n2 palavra banana\n3 palavra blueberry\n4 palavra cherry\n5 palavra grape\n6 palavra kiwi\n7 palavra mango\n8 palavra orange\n9 palavra peach\n10 palavra strawberry\n------------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"# Bubble Sort            \ndef bubble_sort(lista):\n    tam_lista = len(lista)\n    for j in range(tam_lista - 1):\n        for indice in range (tam_lista - 1):\n            if lista[indice] > lista[indice + 1]:\n                aux = lista[indice]\n                lista[indice] = lista[indice + 1] \n                lista[indice + 1] = aux\n\n\nif __name__ == '__main__':\n    strings = [\"banana\", \"apple\", \"orange\", \"grape\", \"cherry\", \"blueberry\", \"peach\", \"kiwi\", \"mango\", \"strawberry\"]\n    lista_teste = [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\n    print('------------------------------------------------------------------')\n    print(f'Lista de inteiros desordenada: {lista_teste}')\n    bubble = bubble_sort(lista_teste)\n    print(f'Lista ordenada de inteiros por Bubble Sort: {lista_teste}')\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings desordenada:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n    bubble2 = bubble_sort(strings)\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings ordenada por Bubble Sort:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T21:48:26.144553Z","iopub.execute_input":"2024-07-01T21:48:26.144990Z","iopub.status.idle":"2024-07-01T21:48:26.159251Z","shell.execute_reply.started":"2024-07-01T21:48:26.144957Z","shell.execute_reply":"2024-07-01T21:48:26.157980Z"},"trusted":true},"execution_count":107,"outputs":[{"name":"stdout","text":"------------------------------------------------------------------\nLista de inteiros desordenada: [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\nLista ordenada de inteiros por Bubble Sort: [1, 3, 5, 6, 8, 16, 22, 28, 29, 32, 34, 41, 42, 49, 50, 51, 63, 64, 69, 74, 77, 81, 83, 88, 90, 117]\n------------------------------------------------------------------\nLista de strings desordenada:\n1 palavra banana\n2 palavra apple\n3 palavra orange\n4 palavra grape\n5 palavra cherry\n6 palavra blueberry\n7 palavra peach\n8 palavra kiwi\n9 palavra mango\n10 palavra strawberry\n------------------------------------------------------------------\n------------------------------------------------------------------\nLista de strings ordenada por Bubble Sort:\n1 palavra apple\n2 palavra banana\n3 palavra blueberry\n4 palavra cherry\n5 palavra grape\n6 palavra kiwi\n7 palavra mango\n8 palavra orange\n9 palavra peach\n10 palavra strawberry\n------------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"# Insertion Sort\ndef insertion_sort(lista):\n    tam_lista = len(lista)\n    for indice in range (1, tam_lista):\n        chave = lista[indice] \n        j = indice - 1 # Representação da parte ja ordenada da lista\n        while j >= 0 and lista[j] > chave:\n            lista[j+1] = lista[j] # Avança quem esta na sub-lista para a lista \n            j = j - 1\n        lista[j+1] = chave\n\nif __name__ == '__main__':\n    strings = [\"banana\", \"apple\", \"orange\", \"grape\", \"cherry\", \"blueberry\", \"peach\", \"kiwi\", \"mango\", \"strawberry\"]\n    lista_teste = [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\n    print('------------------------------------------------------------------')\n    print(f'Lista de inteiros desordenada: {lista_teste}')\n    insertion = insertion_sort(lista_teste)\n    print(f'Lista ordenada de inteiros por Insertion Sort: {lista_teste}')\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings desordenada:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n    insertion2 = insertion_sort(strings)\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings ordenada por Insertion Sort:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T21:48:29.115795Z","iopub.execute_input":"2024-07-01T21:48:29.116196Z","iopub.status.idle":"2024-07-01T21:48:29.130032Z","shell.execute_reply.started":"2024-07-01T21:48:29.116163Z","shell.execute_reply":"2024-07-01T21:48:29.128714Z"},"trusted":true},"execution_count":108,"outputs":[{"name":"stdout","text":"------------------------------------------------------------------\nLista de inteiros desordenada: [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\nLista ordenada de inteiros por Insertion Sort: [1, 3, 5, 6, 8, 16, 22, 28, 29, 32, 34, 41, 42, 49, 50, 51, 63, 64, 69, 74, 77, 81, 83, 88, 90, 117]\n------------------------------------------------------------------\nLista de strings desordenada:\n1 palavra banana\n2 palavra apple\n3 palavra orange\n4 palavra grape\n5 palavra cherry\n6 palavra blueberry\n7 palavra peach\n8 palavra kiwi\n9 palavra mango\n10 palavra strawberry\n------------------------------------------------------------------\n------------------------------------------------------------------\nLista de strings ordenada por Insertion Sort:\n1 palavra apple\n2 palavra banana\n3 palavra blueberry\n4 palavra cherry\n5 palavra grape\n6 palavra kiwi\n7 palavra mango\n8 palavra orange\n9 palavra peach\n10 palavra strawberry\n------------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"# Merge Sort\ndef merge_sort(lista, inicio=0, fim=None):\n    if fim is None:\n        fim = len(lista)\n    if fim-inicio > 1:\n        meio = (inicio + fim)//2\n        merge_sort(lista, inicio, meio)\n        merge_sort(lista, meio, fim)\n        merge(lista, inicio, meio, fim)\n        \ndef merge(lista,inicio,meio,fim):\n    esquerda = lista[inicio:meio] # Notação do python para selecionar os itens da lista especificados\n    direita = lista[meio:fim]\n    top_left, top_right = 0, 0 # Organizam os topos das respectivas sub-listas\n    for k in range (inicio,fim): # o indice 'k' gerencia o indice do topo da lista a ser organizada\n        if top_left >= len(esquerda):\n            lista[k] = direita[top_right]\n            top_right = top_right + 1        \n        elif top_right >= len(direita):\n            lista[k] = esquerda[top_left]\n            top_left = top_left + 1            \n        elif esquerda[top_left] < direita[top_right]:\n            lista[k] = esquerda[top_left]\n            top_left = top_left + 1\n        else:\n            lista[k] = direita[top_right]\n            top_right = top_right + 1\n        \nif __name__ == '__main__':\n    strings = [\"banana\", \"apple\", \"orange\", \"grape\", \"cherry\", \"blueberry\", \"peach\", \"kiwi\", \"mango\", \"strawberry\"]\n    lista_teste = [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\n    print('------------------------------------------------------------------')\n    print(f'Lista de inteiros desordenada: {lista_teste}')\n    merge1 = merge_sort(lista_teste)\n    print(f'Lista ordenada de inteiros por Merge Sort: {lista_teste}')\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings desordenada:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n    merge2 = merge_sort(strings)\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings ordenada por Merge Sort:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T21:53:32.007075Z","iopub.execute_input":"2024-07-01T21:53:32.007537Z","iopub.status.idle":"2024-07-01T21:53:32.025920Z","shell.execute_reply.started":"2024-07-01T21:53:32.007503Z","shell.execute_reply":"2024-07-01T21:53:32.024581Z"},"trusted":true},"execution_count":113,"outputs":[{"name":"stdout","text":"------------------------------------------------------------------\nLista de inteiros desordenada: [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\nLista ordenada de inteiros por Merge Sort: [1, 3, 5, 6, 8, 16, 22, 28, 29, 32, 34, 41, 42, 49, 50, 51, 63, 64, 69, 74, 77, 81, 83, 88, 90, 117]\n------------------------------------------------------------------\nLista de strings desordenada:\n1 palavra banana\n2 palavra apple\n3 palavra orange\n4 palavra grape\n5 palavra cherry\n6 palavra blueberry\n7 palavra peach\n8 palavra kiwi\n9 palavra mango\n10 palavra strawberry\n------------------------------------------------------------------\n------------------------------------------------------------------\nLista de strings ordenada por Merge Sort:\n1 palavra apple\n2 palavra banana\n3 palavra blueberry\n4 palavra cherry\n5 palavra grape\n6 palavra kiwi\n7 palavra mango\n8 palavra orange\n9 palavra peach\n10 palavra strawberry\n------------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"# Quick Sort\ndef quick_sort(lista, inicio = 0, fim = None):\n    if fim is None:\n        fim = len(lista) - 1\n    if inicio < fim:\n        p = partition(lista, inicio, fim) # 'p' é o pivô\n        quick_sort(lista, inicio, p - 1) # Lista da esquerda, dos menores\n        quick_sort(lista, p + 1, fim) # Lista da direita, dos maiores\n        \ndef partition(lista, inicio, fim):\n    pivo = lista[fim]\n    i = inicio\n    for j in range(inicio, fim): # Passa por cada item da lista\n        if lista[j] <= pivo:\n            lista[j], lista[i] = lista[i], lista[j] # Troca de posições \n            i = i + 1 # Incrementa o limite de menor que o pivô\n    lista[i], lista[fim] = lista[fim], lista[i]\n    return i\n\nif __name__ == '__main__':\n    strings = [\"banana\", \"apple\", \"orange\", \"grape\", \"cherry\", \"blueberry\", \"peach\", \"kiwi\", \"mango\", \"strawberry\"]\n    lista_teste = [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\n    print('------------------------------------------------------------------')\n    print(f'Lista de inteiros desordenada: {lista_teste}')\n    quick = quick_sort(lista_teste)\n    print(f'Lista ordenada de inteiros por Quick Sort: {lista_teste}')\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings desordenada:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n    quick2 = quick_sort(strings)\n    print('------------------------------------------------------------------')\n    print(f'Lista de strings ordenada por Quick Sort:')\n    for i in range (len(strings)):\n        print(f'{i+1} palavra',strings[i])\n    print('------------------------------------------------------------------')\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T21:48:34.115846Z","iopub.execute_input":"2024-07-01T21:48:34.116289Z","iopub.status.idle":"2024-07-01T21:48:34.132421Z","shell.execute_reply.started":"2024-07-01T21:48:34.116246Z","shell.execute_reply":"2024-07-01T21:48:34.131105Z"},"trusted":true},"execution_count":110,"outputs":[{"name":"stdout","text":"------------------------------------------------------------------\nLista de inteiros desordenada: [117, 90, 88, 83, 81, 77, 74, 69, 64, 63, 51, 50, 49, 42, 41, 34, 32, 29, 28, 22, 16, 8, 6, 5, 3, 1]\nLista ordenada de inteiros por Quick Sort: [1, 3, 5, 6, 8, 16, 22, 28, 29, 32, 34, 41, 42, 49, 50, 51, 63, 64, 69, 74, 77, 81, 83, 88, 90, 117]\n------------------------------------------------------------------\nLista de strings desordenada:\n1 palavra banana\n2 palavra apple\n3 palavra orange\n4 palavra grape\n5 palavra cherry\n6 palavra blueberry\n7 palavra peach\n8 palavra kiwi\n9 palavra mango\n10 palavra strawberry\n------------------------------------------------------------------\n------------------------------------------------------------------\nLista de strings ordenada por Quick Sort:\n1 palavra apple\n2 palavra banana\n3 palavra blueberry\n4 palavra cherry\n5 palavra grape\n6 palavra kiwi\n7 palavra mango\n8 palavra orange\n9 palavra peach\n10 palavra strawberry\n------------------------------------------------------------------\n","output_type":"stream"}]}]}
